CC = gcc
CFLAGS = -Wall -Werror -Wextra -std=c11 -D_GNU_SOURCE
#SRCS = s21_*.c
SRCS := $(wildcard s21_*.c)
SRCS := $(filter-out s21_sscanf.c, $(SRCS))
OBJS = $(SRCS:.c=.o)

OS := $(shell uname)
ifeq ($(OS),Linux) # определяем ОС
TEST_LIBS = -lcheck -lpthread -lrt -lsubunit -lm -fprofile-arcs -ftest-coverage
else
TEST_LIBS = -lcheck -lpthread -lm -fprofile-arcs -ftest-coverage
endif

all : clean s21_math.a test gcov_report

s21_math.a :
	$(CC) $(CFLAGS) -c $(SRCS)
	ar rc s21_math.a $(OBJS)
	ranlib s21_math.a

%.o : %.c
	$(CC) $(CFLAGS) $< -o $@
	
test: s21_math.a
	checkmk clean_mode=1 math.check > check.c
	$(CC) $(CFLAGS) -c check.c
	ar rc check_test.a check.o
	ranlib check_test.a
	$(CC) $(CFLAGS) $(TEST_LIBS) -o test check_test.a $(SRCS)
	./test

# c - Захват данных о покрытии
#The . is the current directory
#--no-external для игнорирования данных о покрытии для внеш исходных файлов

gcov_report: test
	$(CC) $(TEST_LIBS) check*.c $(SRCS) -o ./test
	./test
	lcov -t "./gcov" -o report.info --no-external -c -d .
	genhtml -o report report.info
	open ./report/index.html

clang :
#	clang-format -i --style=Google *.c *.h *.check
	clang-format -n --style=Google *.c *.h *.check

clean :
	rm -rf *.o *.a gcov *.gch *.gcda *.gcno *.info *.out test report check.c

rebuild : clean all